Selections:

- Selector Matching
ex: select product where name = "iphone" and price = 200
api: db.products.find( {productName:"iphone", price:200} )

- Ranges operators:
    1. ($lt) less than
    2. ($lte) less than or equal
    3. ($gt) greater than
    4. ($gte) greater than or equal
ex: select product where price greater than 200 and price less than 500 
api: db.products.find( { price: {$gt:200, $lt:500} } )

- Set operators:
    1. ($in) in set of values
    2. ($all) in all set of values
    3. ($nin) not in set of values
ex: select prouduct where categoryId in [1,2,3]
api: db.products.find( { categoryId: {$in: [1,2,3]} } )

- Boolean operators:
    1. ($and) And
    2. ($or) OR
    3. ($not) not
    4. ($ne) Not equal
    5. ($exists) Exists
ex: select products where name is not equal "iphone"
api: db.products.find( { productName: {$not: "iphone"} } )

ex: select product where name starts with "Apple" or price less than 700
api: db.products.find( { $or: [{productName: "/^Apple/"}, {price: {$lt:700}}] } )

- where operator (custom where function)
ex: select document where productId = 5
api: db.products.find({ $where: "function(){ return this.productId === 5; }" })
or: db.products.find({ $where: "this.productId === 5" })

//----------------------------------------------------------

Options:

- Projections
ex: select productName from products collection
api: db.products.find({}, { productName:1 })

- Sorting
ex: sort products ascending
ex: db.products.find().sort({ price: 1 })

ex: sort products descending
ex: db.products.find().sort({ price: -1 })

- Paging (skip() / limit())
ex: skip first 1000 record and take the next 50
api: db.products.skip(1000).limit(50)

//----------------------------------------------------

Aggregation:

- aggregate()
ex: return sum of order totals per customer (ordered descending by orders total)
api: db.orders.aggregate([
    { $group: { _id:"$customerId", total: {$sum: "$amount"} } },
    { $sort: { total: -1 } }
])
